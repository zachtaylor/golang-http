// Code generated by go-jenny(taylz.io/cmd/go-jenny@v0.0.0) DO NOT EDIT.

package user

import (
	"sync"

	"taylz.io/http/websocket"
)

// Sockets is an observable concurrent in-memory datastore
type Sockets struct {
	dat map[string]*websocket.T
	mu  sync.Mutex
	obs []SocketsObserver
}

// SocketsGetter is a func(string)->*websocket.T
type SocketsGetter = func(string) *websocket.T

// SocketsObserver is a func(string, old*websocket.T, new*websocket.T)
type SocketsObserver = func(string, *websocket.T, *websocket.T)

// SocketsSetter is a func(string,*websocket.T)
type SocketsSetter = func(string, *websocket.T)

// NewSockets returns a new Sockets
func NewSockets() *Sockets {
	return &Sockets{
		dat: make(map[string]*websocket.T),
		obs: make([]SocketsObserver, 0),
	}
}

// Get returns the *websocket.T for a string
func (this *Sockets) Get(k string) *websocket.T { return this.dat[k] }

// Set saves a *websocket.T for a string
func (this *Sockets) Set(k string, v *websocket.T) {
	this.mu.Lock()
	this.set(k, v)
	this.mu.Unlock()
}

func (this *Sockets) set(k string, v *websocket.T) {
	old := this.dat[k]
	if v != nil {
		this.dat[k] = v
	} else {
		delete(this.dat, k)
	}
	for _, f := range this.obs {
		f(k, old, v)
	}
}

// Each calls the func for each string,*websocket.T in this Sockets
func (this *Sockets) Each(f SocketsSetter) {
	this.mu.Lock()
	for k, v := range this.dat {
		f(k, v)
	}
	this.mu.Unlock()
}

// Sync calls the func within the cache lock state
func (this *Sockets) Sync(f func(SocketsGetter, SocketsSetter)) {
	this.mu.Lock()
	f(this.Get, this.set)
	this.mu.Unlock()
}

// Keys returns a new slice with all the string keys
func (this *Sockets) Keys() []string {
	this.mu.Lock()
	keys := make([]string, 0, len(this.dat))
	for k := range this.dat {
		keys = append(keys, k)
	}
	this.mu.Unlock()
	return keys
}

// Observe adds a func to be called when a *websocket.T is set
func (this *Sockets) Observe(f SocketsObserver) { this.obs = append(this.obs, f) }

// Remove deletes a string,*websocket.T
func (this *Sockets) Remove(k string) { this.Set(k, nil) }
